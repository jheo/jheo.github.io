<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scalability on jheo.io</title>
    <link>https://jheo.io/tags/scalability/</link>
    <description>Recent content in Scalability on jheo.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 27 Jul 2021 00:04:36 +0900</lastBuildDate><atom:link href="https://jheo.io/tags/scalability/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>레디스를 활용한 스케일아웃 레시피</title>
      <link>https://jheo.io/blog/scale-out-with-redis/</link>
      <pubDate>Tue, 27 Jul 2021 00:04:36 +0900</pubDate>
      
      <guid>https://jheo.io/blog/scale-out-with-redis/</guid>
      <description>제가 예전에 수행했던 어떤 프로젝트는 웨어러블 장비를 통해 수집된 심전도 데이터를 안드로이드 기기로 전송하여 24시간에서 72시간 정도 취합한 뒤 서버로 업로드 하면 별도의 딥러닝 분석 모듈을 통해서 사용자의 심장 건강에 문제가 있는지 체크해주는 애플리케이션들을 만드는 프로젝트 였습니다. 심전도, 웨어러블, 딥러닝 등 뭔가 최신기술의 집약체를 나타내는 듯한 단어들이 많이 나온 것에 비해서 전체적인 아키텍처는 단순한 편이었습니다. 웨어러블 장비와 안드로이드 장비간의 연결은 블루투스, 안드로이드 장비는 수집한 데이터를 Rest API와 Multipart Request를 이용하여 서버에 업로드 하고, 서버는 이 데이터를 일부 정제하여 분석 서버에 넘기고, 분석 서버는 쉘 프로그램을 수행하여 분석을 수행하고 그 결과를 다시 DB에 집어넣습니다.</description>
    </item>
    
    <item>
      <title>클라우드 네이티브 프로그래밍 101</title>
      <link>https://jheo.io/blog/cloud-native-programming-101/</link>
      <pubDate>Tue, 27 Jul 2021 00:04:36 +0900</pubDate>
      
      <guid>https://jheo.io/blog/cloud-native-programming-101/</guid>
      <description>클라우드 네이티브 프로그래밍이란 클라우드 환경을 위한 프로그램을 만드는 것을 의미합니다. 다만, 단순히 클라우드 환경에 배포할 수 있는 프로그램의 개발만을 고려하는 것이 아니라 클라우드 환경의 특성에 맞게 동작할 수 있는, 클라우드에서 제공하는 것들을 적극적으로 활용하는 프로그램을 만드는 것을 의미한다고 생각하면 좋을 것 같습니다.
클라우드 컴퓨팅은 개발자의 관점에서는 무한할 정도로 많은 자원들을 가진 클라우드 인프라에서 목적에 맞는 기능을 가진 자원을 필요한 만큼 할당받아서 사용하는 것을 가능하게 했습니다. 그래서 과거에는 직접 물리적인 서버를 들고 가서 랙에 설치하고 랜선을 꽂아야 했던 서버 증설의 과정이 클릭 몇 번으로, 혹은 클릭도 없이 자동으로 이루어질만큼 단순해졌고 그 반대의 경우도 비슷하게 단순해졌습니다.</description>
    </item>
    
  </channel>
</rss>
